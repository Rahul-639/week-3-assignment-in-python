# Definition for singly-linked list node
class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

def kthFromEnd(head, k):
    first = head
    second = head
    
    # Move first pointer k steps ahead
    for _ in range(k):
        if not first:
            return -1  # k is greater than number of nodes
        first = first.next
    
    # Move both pointers until first reaches end
    while first:
        first = first.next
        second = second.next
    
    return second.data if second else -1

# Helper function to print linked list (optional)
def printList(head):
    temp = head
    while temp:
        print(temp.data, end="->" if temp.next else "")
        temp = temp.next
    print()

# Example usage
if __name__ == "__main__":
    # Creating example linked list: 1->2->3->4->5->6->7->8->9
    head = Node(1)
    current = head
    for i in range(2, 10):
        current.next = Node(i)
        current = current.next
    
    print("Linked List:")
    printList(head)
    
    k = 2
    result = kthFromEnd(head, k)
    print(f"{k}th node from end:", result)
