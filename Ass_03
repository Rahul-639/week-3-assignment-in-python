# Definition for singly-linked list node
class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

def deleteNode(head, x):
    # If the head itself needs to be deleted
    if x == 1:
        return head.next
    
    # Traverse to the node just before the one we want to delete
    current = head
    count = 1
    while current and count < x - 1:
        current = current.next
        count += 1
    
    # Delete the x-th node if it exists
    if current and current.next:
        current.next = current.next.next
    
    return head

# Helper function to print the linked list
def printList(head):
    temp = head
    while temp:
        print(temp.data, end="->" if temp.next else "")
        temp = temp.next
    print()

# Example usage
if __name__ == "__main__":
    # Creating example linked list: 1->3->4
    head = Node(1)
    head.next = Node(3)
    head.next.next = Node(4)
    
    print("Original List:")
    printList(head)
    
    x = 3
    head = deleteNode(head, x)
    
    print(f"After deleting node at position {x}:")
    printList(head)
